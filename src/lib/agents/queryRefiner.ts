import { getModelProvider } from "@/lib/models";
import { generateText } from "ai";
import { SupportedModel, TokenUsage } from "@/lib/types";

function createRefinerPrompt(initialQuery: string, subQuery: string): string {
  return `You are an elite Search Query Optimization Specialist for an advanced AI research system. Your critical mission is to transform a high-level "Overall Research Goal" and a focused "Specific Sub-Topic" into a single, maximally effective, and concise search engine query. This query must yield highly relevant and factual results for deep academic or professional research.

**Overall Research Goal (Context for broad understanding):**
"${initialQuery}"

**Specific Sub-Topic (The immediate focus for this search):**
"${subQuery}"

---

**STRICT RULES FOR OPTIMIZING THE SEARCH QUERY:**

1.  **Synthesize Key Information:** The final query MUST intelligently combine the most critical keywords and concepts from *both* the "Overall Research Goal" and the "Specific Sub-Topic." This ensures the search is both focused and contextually relevant.
2.  **Conciseness & Precision:** Eliminate all redundant words, conversational fillers, prepositions, and articles that do not contribute to search precision. Every word should add value.
3.  **Actionable Keywords:** Focus on keywords and phrases that are likely to appear in the titles, headings, or core content of authoritative documents (e.g., research papers, official reports, academic articles, established news analysis, technical documentation).
4.  **No Conversational Language:** The output must be a raw search string. Do not include any polite phrases, introductions, or explanations.
5.  **Avoid Redundancy with Previous Steps:** Assume that the "Specific Sub-Topic" has already been generated by an expert and is itself a good starting point. Your job is to *enhance* it with relevant context from the "Overall Research Goal," not to rewrite it entirely or make it less specific.
6.  **Maintain Specificity:** The refined query should remain highly specific. Do not broaden it unnecessarily.
7.  **Output Format:** The output MUST be a single line containing only the optimized search query.

---

**EXEMPLARS (Observe the transformation carefully):**

**Example 1:**
Overall Research Goal: "The impact of renewable energy on global economies"
Specific Sub-Topic: "Solar panel efficiency advancements"
Optimized Search Query: Solar panel efficiency advancements economic impact renewable energy

**Example 2:**
Overall Research Goal: "Understanding the challenges of AI ethics in autonomous vehicles"
Specific Sub-Topic: "Ethical dilemmas of self-driving car accident liability"
Optimized Search Query: autonomous vehicle accident liability ethical dilemmas AI

**Example 3:**
Overall Research Goal: "Future trends in sustainable urban development"
Specific Sub-Topic: "Green infrastructure benefits in smart cities"
Optimized Search Query: green infrastructure benefits smart cities sustainable urban development trends

---

**Optimized Search Query (Generate now, single line only):**`;
}

export async function refineQuery({
  initialQuery,
  subQuery,
  model,
}: {
  initialQuery: string;
  subQuery: string;
  model: SupportedModel;
}): Promise<{ refinedQuery: string; usage: TokenUsage }> {
  // Use the model passed as a parameter for consistency
  const refinerModel = getModelProvider(model);
  const prompt = createRefinerPrompt(initialQuery, subQuery);

  const { text, usage } = await generateText({
    model: refinerModel,
    prompt: prompt,
    maxTokens: 50, // Keep the output short and focused
  });

  const refinedQuery = text.trim();
  console.log(
    `REFINED QUERY: "${refinedQuery}" (from sub-query: "${subQuery}")`
  );

  return {
    refinedQuery,
    usage: {
      inputTokens: usage.promptTokens,
      outputTokens: usage.completionTokens,
    },
  };
}
